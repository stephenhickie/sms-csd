---
  - name: Setup EC2 Key
    connection: local
    local_action:
      module: ec2_key
      name: "{{ demo_security_key }}"
      region: "{{ aws_region }}"
      key_material: "{{ item }}"
    with_file: ~/.ssh/id_rsa.pub
    #
    #     - name: demo VPC
    #       ec2_vpc:
    #         state: present
    #         cidr_block: 172.22.0.0/16
    #         resource_tags: { "Environment":"Demo", name: "{{project}}", owner: "{{owner}}" }
    #         subnets:
    #           - cidr: 172.22.1.0/24
    #             az: "{{ az }}"
    #             resource_tags: { "Environment":"Demo", "Name" : "WebTier" }
    #           - cidr: 172.22.2.0/24
    #             az: "{{ az }}"
    #             resource_tags: { "Environment":"Demo", "Name" : "AppTier" }
    #         internet_gateway: True
    #         route_tables:
    #           - subnets:
    #               - 172.22.2.0/24
    #             routes:
    #               - dest: 0.0.0.0/0
    #                 gw: igw
    #           - subnets:
    #               - 172.22.1.0/24
    #             routes:
    #               - dest: 0.0.0.0/0
    #                 gw: igw
    #         region: "{{ aws_region }}"
    #       register: vpc
    #
    #     - name: Find the Web Tier public subnet
    #       set_fact: vpc_webtier_subnet_id="{{ item.id }}"
    #       when: item.resource_tags.Tier == "Web"
    #       with_items: vpc.subnets
    #
    #     - debug: var=vpc_webtier_subnet_id
    #
    #     - name: Setup the security group
    #       local_action:
    #         module: ec2_group
    #         name: "{{ demo_security_group }}"
    #         description: Access SMS CSD Default Security Group
    #         region: "{{ aws_region }}"
    #         vpc_id: "{{ vpc.vpc_id}}"
    #         rules:
    #           - proto: tcp
    #             from_port: 22
    #             to_port: 22
    #             cidr_ip: 0.0.0.0/0
    #           - proto: tcp
    #             from_port: 80
    #             to_port: 80
    #             cidr_ip: 0.0.0.0/0
    #           - proto: tcp
    #             from_port: 3389
    #             to_port: 3389
    #             cidr_ip: 0.0.0.0/0
    #       register: secgroup
    #
    #     - debug: var=secgroup
    #
    #
    #
    #
    #     # - debug: msg="Oh Hai! you're looking at {{ ec2.instances[0].public_ip }}"
    #
    #     # - name: Gather EC2 facts
    #     #   local_action: ec2_facts
    #     #   register: ec2_facts
    #     # #
    # #     - debug: var=hostvars
    #     - debug: var=ec2.results
    # #     # - debug: var=ec2.results[0].tagged_instances
    # #     # - debug: var=ec2.results[0].tagged_instances.id
    # #     # - debug: var=ec2.results[0].tagged_instances[0].id
    # #     # - debug: msg="Now for the crunchy bit"
    # #     # - debug: var=ec2.results.public_ip
    # #     # - debug: msg="And now {{ item.tagged_instances[0].public_ip }}"
    # #     #   with_items: ec2.results
    # #
    # #     # - debug: msg="And now {{ item.tagged_instances[0].public_ip }}"
    # #     #   with_items: ec2.results.tagged_instances["State"]
    # #
    #
    #     # - name: Find the Web Tier public subnet
    #     #   set_fact: vpc_webtier_subnet_id="{{ item.id }}"
    #     #   when: item.resource_tags.Tier == "Web"
    #     #   with_items: vpc.subnets
    #     #
    #
    #
    #     - name: Add new instance to host group
    #       add_host: hostname={{ item.tagged_instances[0].public_dns_name  }} groupname=launched
    #       with_items: ec2.results
    #
    #
    #
    # - name: Install Software
    #   hosts: launched
    #   remote_user: ubuntu
    #   tasks:
    #       - name: Install NTP
    #         sudo: yes
    #         apt: package=ntp state=present update_cache=yes
    #         tags: ntp
